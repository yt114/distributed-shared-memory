// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paxos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paxos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paxos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paxos_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_paxos_2eproto;
class AcceptPacket;
class AcceptPacketDefaultTypeInternal;
extern AcceptPacketDefaultTypeInternal _AcceptPacket_default_instance_;
class ClientRequestPacket;
class ClientRequestPacketDefaultTypeInternal;
extern ClientRequestPacketDefaultTypeInternal _ClientRequestPacket_default_instance_;
class PreparePacket;
class PreparePacketDefaultTypeInternal;
extern PreparePacketDefaultTypeInternal _PreparePacket_default_instance_;
class PromisePacket;
class PromisePacketDefaultTypeInternal;
extern PromisePacketDefaultTypeInternal _PromisePacket_default_instance_;
class ProposePacket;
class ProposePacketDefaultTypeInternal;
extern ProposePacketDefaultTypeInternal _ProposePacket_default_instance_;
class ServerResponsePacket;
class ServerResponsePacketDefaultTypeInternal;
extern ServerResponsePacketDefaultTypeInternal _ServerResponsePacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AcceptPacket* Arena::CreateMaybeMessage<::AcceptPacket>(Arena*);
template<> ::ClientRequestPacket* Arena::CreateMaybeMessage<::ClientRequestPacket>(Arena*);
template<> ::PreparePacket* Arena::CreateMaybeMessage<::PreparePacket>(Arena*);
template<> ::PromisePacket* Arena::CreateMaybeMessage<::PromisePacket>(Arena*);
template<> ::ProposePacket* Arena::CreateMaybeMessage<::ProposePacket>(Arena*);
template<> ::ServerResponsePacket* Arena::CreateMaybeMessage<::ServerResponsePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ClientRequestPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientRequestPacket) */ {
 public:
  inline ClientRequestPacket() : ClientRequestPacket(nullptr) {}
  virtual ~ClientRequestPacket();

  ClientRequestPacket(const ClientRequestPacket& from);
  ClientRequestPacket(ClientRequestPacket&& from) noexcept
    : ClientRequestPacket() {
    *this = ::std::move(from);
  }

  inline ClientRequestPacket& operator=(const ClientRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequestPacket& operator=(ClientRequestPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequestPacket* internal_default_instance() {
    return reinterpret_cast<const ClientRequestPacket*>(
               &_ClientRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientRequestPacket& a, ClientRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequestPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequestPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientRequestPacket* New() const final {
    return CreateMaybeMessage<ClientRequestPacket>(nullptr);
  }

  ClientRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientRequestPacket& from);
  void MergeFrom(const ClientRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientRequestPacket";
  }
  protected:
  explicit ClientRequestPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_2eproto);
    return ::descriptor_table_paxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 4,
    kValueFieldNumber = 5,
    kClientIdFieldNumber = 1,
    kClientCommandIdFieldNumber = 2,
    kIsWriteFieldNumber = 3,
  };
  // string key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_command_id = 2;
  void clear_client_command_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id() const;
  void set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_command_id() const;
  void _internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_write = 3;
  void clear_is_write();
  bool is_write() const;
  void set_is_write(bool value);
  private:
  bool _internal_is_write() const;
  void _internal_set_is_write(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ClientRequestPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id_;
  bool is_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_2eproto;
};
// -------------------------------------------------------------------

class ServerResponsePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerResponsePacket) */ {
 public:
  inline ServerResponsePacket() : ServerResponsePacket(nullptr) {}
  virtual ~ServerResponsePacket();

  ServerResponsePacket(const ServerResponsePacket& from);
  ServerResponsePacket(ServerResponsePacket&& from) noexcept
    : ServerResponsePacket() {
    *this = ::std::move(from);
  }

  inline ServerResponsePacket& operator=(const ServerResponsePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponsePacket& operator=(ServerResponsePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerResponsePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponsePacket* internal_default_instance() {
    return reinterpret_cast<const ServerResponsePacket*>(
               &_ServerResponsePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerResponsePacket& a, ServerResponsePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponsePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerResponsePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResponsePacket* New() const final {
    return CreateMaybeMessage<ServerResponsePacket>(nullptr);
  }

  ServerResponsePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponsePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerResponsePacket& from);
  void MergeFrom(const ServerResponsePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponsePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerResponsePacket";
  }
  protected:
  explicit ServerResponsePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_2eproto);
    return ::descriptor_table_paxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 5,
    kValueFieldNumber = 6,
    kClientIdFieldNumber = 1,
    kClientCommandIdFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kIsSuccessFieldNumber = 4,
  };
  // string key = 5;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 6;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_command_id = 2;
  void clear_client_command_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id() const;
  void set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_command_id() const;
  void _internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_success = 4;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ServerResponsePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  bool is_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_2eproto;
};
// -------------------------------------------------------------------

class PreparePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PreparePacket) */ {
 public:
  inline PreparePacket() : PreparePacket(nullptr) {}
  virtual ~PreparePacket();

  PreparePacket(const PreparePacket& from);
  PreparePacket(PreparePacket&& from) noexcept
    : PreparePacket() {
    *this = ::std::move(from);
  }

  inline PreparePacket& operator=(const PreparePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreparePacket& operator=(PreparePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreparePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreparePacket* internal_default_instance() {
    return reinterpret_cast<const PreparePacket*>(
               &_PreparePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PreparePacket& a, PreparePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(PreparePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreparePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreparePacket* New() const final {
    return CreateMaybeMessage<PreparePacket>(nullptr);
  }

  PreparePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreparePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreparePacket& from);
  void MergeFrom(const PreparePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreparePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PreparePacket";
  }
  protected:
  explicit PreparePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_2eproto);
    return ::descriptor_table_paxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogEntryFieldNumber = 1,
    kProposalNumFieldNumber = 2,
    kServerIdFieldNumber = 3,
  };
  // int32 log_entry = 1;
  void clear_log_entry();
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry() const;
  void set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_entry() const;
  void _internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 proposal_num = 2;
  void clear_proposal_num();
  ::PROTOBUF_NAMESPACE_ID::int32 proposal_num() const;
  void set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proposal_num() const;
  void _internal_set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PreparePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry_;
  ::PROTOBUF_NAMESPACE_ID::int32 proposal_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_2eproto;
};
// -------------------------------------------------------------------

class PromisePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PromisePacket) */ {
 public:
  inline PromisePacket() : PromisePacket(nullptr) {}
  virtual ~PromisePacket();

  PromisePacket(const PromisePacket& from);
  PromisePacket(PromisePacket&& from) noexcept
    : PromisePacket() {
    *this = ::std::move(from);
  }

  inline PromisePacket& operator=(const PromisePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromisePacket& operator=(PromisePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PromisePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PromisePacket* internal_default_instance() {
    return reinterpret_cast<const PromisePacket*>(
               &_PromisePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PromisePacket& a, PromisePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(PromisePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromisePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PromisePacket* New() const final {
    return CreateMaybeMessage<PromisePacket>(nullptr);
  }

  PromisePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PromisePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PromisePacket& from);
  void MergeFrom(const PromisePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromisePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PromisePacket";
  }
  protected:
  explicit PromisePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_2eproto);
    return ::descriptor_table_paxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kAcceptedIdFieldNumber = 4,
    kKeyFieldNumber = 8,
    kValueFieldNumber = 9,
    kMaxProposalNumFieldNumber = 3,
    kErrorFieldNumber = 1,
    kIsWriteFieldNumber = 7,
    kClientIdFieldNumber = 5,
    kClientCommandIdFieldNumber = 6,
    kLogEntryFieldNumber = 10,
    kServerIdFieldNumber = 11,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string accepted_id = 4;
  void clear_accepted_id();
  const std::string& accepted_id() const;
  void set_accepted_id(const std::string& value);
  void set_accepted_id(std::string&& value);
  void set_accepted_id(const char* value);
  void set_accepted_id(const char* value, size_t size);
  std::string* mutable_accepted_id();
  std::string* release_accepted_id();
  void set_allocated_accepted_id(std::string* accepted_id);
  private:
  const std::string& _internal_accepted_id() const;
  void _internal_set_accepted_id(const std::string& value);
  std::string* _internal_mutable_accepted_id();
  public:

  // string key = 8;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 9;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 max_proposal_num = 3;
  void clear_max_proposal_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_proposal_num() const;
  void set_max_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_proposal_num() const;
  void _internal_set_max_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool error = 1;
  void clear_error();
  bool error() const;
  void set_error(bool value);
  private:
  bool _internal_error() const;
  void _internal_set_error(bool value);
  public:

  // bool is_write = 7;
  void clear_is_write();
  bool is_write() const;
  void set_is_write(bool value);
  private:
  bool _internal_is_write() const;
  void _internal_set_is_write(bool value);
  public:

  // int32 client_id = 5;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_command_id = 6;
  void clear_client_command_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id() const;
  void set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_command_id() const;
  void _internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 log_entry = 10;
  void clear_log_entry();
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry() const;
  void set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_entry() const;
  void _internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 11;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PromisePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accepted_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_proposal_num_;
  bool error_;
  bool is_write_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_2eproto;
};
// -------------------------------------------------------------------

class ProposePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProposePacket) */ {
 public:
  inline ProposePacket() : ProposePacket(nullptr) {}
  virtual ~ProposePacket();

  ProposePacket(const ProposePacket& from);
  ProposePacket(ProposePacket&& from) noexcept
    : ProposePacket() {
    *this = ::std::move(from);
  }

  inline ProposePacket& operator=(const ProposePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposePacket& operator=(ProposePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposePacket* internal_default_instance() {
    return reinterpret_cast<const ProposePacket*>(
               &_ProposePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProposePacket& a, ProposePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposePacket* New() const final {
    return CreateMaybeMessage<ProposePacket>(nullptr);
  }

  ProposePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposePacket& from);
  void MergeFrom(const ProposePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProposePacket";
  }
  protected:
  explicit ProposePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_2eproto);
    return ::descriptor_table_paxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 7,
    kValueFieldNumber = 8,
    kLogEntryFieldNumber = 1,
    kProposalNumFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kClientCommandIdFieldNumber = 5,
    kIsWriteFieldNumber = 6,
  };
  // string key = 7;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 8;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 log_entry = 1;
  void clear_log_entry();
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry() const;
  void set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_entry() const;
  void _internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 proposal_num = 2;
  void clear_proposal_num();
  ::PROTOBUF_NAMESPACE_ID::int32 proposal_num() const;
  void set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proposal_num() const;
  void _internal_set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_id = 4;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_command_id = 5;
  void clear_client_command_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id() const;
  void set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_command_id() const;
  void _internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_write = 6;
  void clear_is_write();
  bool is_write() const;
  void set_is_write(bool value);
  private:
  bool _internal_is_write() const;
  void _internal_set_is_write(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProposePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry_;
  ::PROTOBUF_NAMESPACE_ID::int32 proposal_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id_;
  bool is_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_2eproto;
};
// -------------------------------------------------------------------

class AcceptPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcceptPacket) */ {
 public:
  inline AcceptPacket() : AcceptPacket(nullptr) {}
  virtual ~AcceptPacket();

  AcceptPacket(const AcceptPacket& from);
  AcceptPacket(AcceptPacket&& from) noexcept
    : AcceptPacket() {
    *this = ::std::move(from);
  }

  inline AcceptPacket& operator=(const AcceptPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptPacket& operator=(AcceptPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptPacket* internal_default_instance() {
    return reinterpret_cast<const AcceptPacket*>(
               &_AcceptPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AcceptPacket& a, AcceptPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptPacket* New() const final {
    return CreateMaybeMessage<AcceptPacket>(nullptr);
  }

  AcceptPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptPacket& from);
  void MergeFrom(const AcceptPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcceptPacket";
  }
  protected:
  explicit AcceptPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_2eproto);
    return ::descriptor_table_paxos_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 7,
    kValueFieldNumber = 8,
    kErrorMessageFieldNumber = 10,
    kLogEntryFieldNumber = 1,
    kProposalNumFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kClientCommandIdFieldNumber = 5,
    kIsErrorFieldNumber = 9,
    kIsWriteFieldNumber = 6,
  };
  // string key = 7;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 8;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string error_message = 10;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int32 log_entry = 1;
  void clear_log_entry();
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry() const;
  void set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_entry() const;
  void _internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 proposal_num = 2;
  void clear_proposal_num();
  ::PROTOBUF_NAMESPACE_ID::int32 proposal_num() const;
  void set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proposal_num() const;
  void _internal_set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_id = 4;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_command_id = 5;
  void clear_client_command_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id() const;
  void set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_command_id() const;
  void _internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_error = 9;
  void clear_is_error();
  bool is_error() const;
  void set_is_error(bool value);
  private:
  bool _internal_is_error() const;
  void _internal_set_is_error(bool value);
  public:

  // bool is_write = 6;
  void clear_is_write();
  bool is_write() const;
  void set_is_write(bool value);
  private:
  bool _internal_is_write() const;
  void _internal_set_is_write(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcceptPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_entry_;
  ::PROTOBUF_NAMESPACE_ID::int32 proposal_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_command_id_;
  bool is_error_;
  bool is_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientRequestPacket

// int32 client_id = 1;
inline void ClientRequestPacket::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientRequestPacket::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientRequestPacket::client_id() const {
  // @@protoc_insertion_point(field_get:ClientRequestPacket.client_id)
  return _internal_client_id();
}
inline void ClientRequestPacket::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void ClientRequestPacket::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ClientRequestPacket.client_id)
}

// int32 client_command_id = 2;
inline void ClientRequestPacket::clear_client_command_id() {
  client_command_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientRequestPacket::_internal_client_command_id() const {
  return client_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientRequestPacket::client_command_id() const {
  // @@protoc_insertion_point(field_get:ClientRequestPacket.client_command_id)
  return _internal_client_command_id();
}
inline void ClientRequestPacket::_internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_command_id_ = value;
}
inline void ClientRequestPacket::set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_command_id(value);
  // @@protoc_insertion_point(field_set:ClientRequestPacket.client_command_id)
}

// bool is_write = 3;
inline void ClientRequestPacket::clear_is_write() {
  is_write_ = false;
}
inline bool ClientRequestPacket::_internal_is_write() const {
  return is_write_;
}
inline bool ClientRequestPacket::is_write() const {
  // @@protoc_insertion_point(field_get:ClientRequestPacket.is_write)
  return _internal_is_write();
}
inline void ClientRequestPacket::_internal_set_is_write(bool value) {
  
  is_write_ = value;
}
inline void ClientRequestPacket::set_is_write(bool value) {
  _internal_set_is_write(value);
  // @@protoc_insertion_point(field_set:ClientRequestPacket.is_write)
}

// string key = 4;
inline void ClientRequestPacket::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientRequestPacket::key() const {
  // @@protoc_insertion_point(field_get:ClientRequestPacket.key)
  return _internal_key();
}
inline void ClientRequestPacket::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ClientRequestPacket.key)
}
inline std::string* ClientRequestPacket::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ClientRequestPacket.key)
  return _internal_mutable_key();
}
inline const std::string& ClientRequestPacket::_internal_key() const {
  return key_.Get();
}
inline void ClientRequestPacket::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientRequestPacket::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestPacket.key)
}
inline void ClientRequestPacket::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientRequestPacket.key)
}
inline void ClientRequestPacket::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientRequestPacket.key)
}
inline std::string* ClientRequestPacket::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientRequestPacket::release_key() {
  // @@protoc_insertion_point(field_release:ClientRequestPacket.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientRequestPacket::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientRequestPacket.key)
}

// string value = 5;
inline void ClientRequestPacket::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientRequestPacket::value() const {
  // @@protoc_insertion_point(field_get:ClientRequestPacket.value)
  return _internal_value();
}
inline void ClientRequestPacket::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ClientRequestPacket.value)
}
inline std::string* ClientRequestPacket::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ClientRequestPacket.value)
  return _internal_mutable_value();
}
inline const std::string& ClientRequestPacket::_internal_value() const {
  return value_.Get();
}
inline void ClientRequestPacket::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientRequestPacket::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientRequestPacket.value)
}
inline void ClientRequestPacket::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientRequestPacket.value)
}
inline void ClientRequestPacket::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientRequestPacket.value)
}
inline std::string* ClientRequestPacket::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientRequestPacket::release_value() {
  // @@protoc_insertion_point(field_release:ClientRequestPacket.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientRequestPacket::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientRequestPacket.value)
}

// -------------------------------------------------------------------

// ServerResponsePacket

// int32 client_id = 1;
inline void ServerResponsePacket::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponsePacket::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponsePacket::client_id() const {
  // @@protoc_insertion_point(field_get:ServerResponsePacket.client_id)
  return _internal_client_id();
}
inline void ServerResponsePacket::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void ServerResponsePacket::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ServerResponsePacket.client_id)
}

// int32 client_command_id = 2;
inline void ServerResponsePacket::clear_client_command_id() {
  client_command_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponsePacket::_internal_client_command_id() const {
  return client_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponsePacket::client_command_id() const {
  // @@protoc_insertion_point(field_get:ServerResponsePacket.client_command_id)
  return _internal_client_command_id();
}
inline void ServerResponsePacket::_internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_command_id_ = value;
}
inline void ServerResponsePacket::set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_command_id(value);
  // @@protoc_insertion_point(field_set:ServerResponsePacket.client_command_id)
}

// int32 server_id = 3;
inline void ServerResponsePacket::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponsePacket::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerResponsePacket::server_id() const {
  // @@protoc_insertion_point(field_get:ServerResponsePacket.server_id)
  return _internal_server_id();
}
inline void ServerResponsePacket::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void ServerResponsePacket::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:ServerResponsePacket.server_id)
}

// bool is_success = 4;
inline void ServerResponsePacket::clear_is_success() {
  is_success_ = false;
}
inline bool ServerResponsePacket::_internal_is_success() const {
  return is_success_;
}
inline bool ServerResponsePacket::is_success() const {
  // @@protoc_insertion_point(field_get:ServerResponsePacket.is_success)
  return _internal_is_success();
}
inline void ServerResponsePacket::_internal_set_is_success(bool value) {
  
  is_success_ = value;
}
inline void ServerResponsePacket::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:ServerResponsePacket.is_success)
}

// string key = 5;
inline void ServerResponsePacket::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerResponsePacket::key() const {
  // @@protoc_insertion_point(field_get:ServerResponsePacket.key)
  return _internal_key();
}
inline void ServerResponsePacket::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ServerResponsePacket.key)
}
inline std::string* ServerResponsePacket::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ServerResponsePacket.key)
  return _internal_mutable_key();
}
inline const std::string& ServerResponsePacket::_internal_key() const {
  return key_.Get();
}
inline void ServerResponsePacket::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerResponsePacket::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerResponsePacket.key)
}
inline void ServerResponsePacket::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerResponsePacket.key)
}
inline void ServerResponsePacket::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerResponsePacket.key)
}
inline std::string* ServerResponsePacket::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerResponsePacket::release_key() {
  // @@protoc_insertion_point(field_release:ServerResponsePacket.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponsePacket::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerResponsePacket.key)
}

// string value = 6;
inline void ServerResponsePacket::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerResponsePacket::value() const {
  // @@protoc_insertion_point(field_get:ServerResponsePacket.value)
  return _internal_value();
}
inline void ServerResponsePacket::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ServerResponsePacket.value)
}
inline std::string* ServerResponsePacket::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ServerResponsePacket.value)
  return _internal_mutable_value();
}
inline const std::string& ServerResponsePacket::_internal_value() const {
  return value_.Get();
}
inline void ServerResponsePacket::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerResponsePacket::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServerResponsePacket.value)
}
inline void ServerResponsePacket::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServerResponsePacket.value)
}
inline void ServerResponsePacket::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServerResponsePacket.value)
}
inline std::string* ServerResponsePacket::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerResponsePacket::release_value() {
  // @@protoc_insertion_point(field_release:ServerResponsePacket.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerResponsePacket::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServerResponsePacket.value)
}

// -------------------------------------------------------------------

// PreparePacket

// int32 log_entry = 1;
inline void PreparePacket::clear_log_entry() {
  log_entry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreparePacket::_internal_log_entry() const {
  return log_entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreparePacket::log_entry() const {
  // @@protoc_insertion_point(field_get:PreparePacket.log_entry)
  return _internal_log_entry();
}
inline void PreparePacket::_internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_entry_ = value;
}
inline void PreparePacket::set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_entry(value);
  // @@protoc_insertion_point(field_set:PreparePacket.log_entry)
}

// int32 proposal_num = 2;
inline void PreparePacket::clear_proposal_num() {
  proposal_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreparePacket::_internal_proposal_num() const {
  return proposal_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreparePacket::proposal_num() const {
  // @@protoc_insertion_point(field_get:PreparePacket.proposal_num)
  return _internal_proposal_num();
}
inline void PreparePacket::_internal_set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proposal_num_ = value;
}
inline void PreparePacket::set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proposal_num(value);
  // @@protoc_insertion_point(field_set:PreparePacket.proposal_num)
}

// int32 server_id = 3;
inline void PreparePacket::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreparePacket::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PreparePacket::server_id() const {
  // @@protoc_insertion_point(field_get:PreparePacket.server_id)
  return _internal_server_id();
}
inline void PreparePacket::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void PreparePacket::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:PreparePacket.server_id)
}

// -------------------------------------------------------------------

// PromisePacket

// int32 server_id = 11;
inline void PromisePacket::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::server_id() const {
  // @@protoc_insertion_point(field_get:PromisePacket.server_id)
  return _internal_server_id();
}
inline void PromisePacket::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void PromisePacket::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:PromisePacket.server_id)
}

// int32 log_entry = 10;
inline void PromisePacket::clear_log_entry() {
  log_entry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::_internal_log_entry() const {
  return log_entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::log_entry() const {
  // @@protoc_insertion_point(field_get:PromisePacket.log_entry)
  return _internal_log_entry();
}
inline void PromisePacket::_internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_entry_ = value;
}
inline void PromisePacket::set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_entry(value);
  // @@protoc_insertion_point(field_set:PromisePacket.log_entry)
}

// bool error = 1;
inline void PromisePacket::clear_error() {
  error_ = false;
}
inline bool PromisePacket::_internal_error() const {
  return error_;
}
inline bool PromisePacket::error() const {
  // @@protoc_insertion_point(field_get:PromisePacket.error)
  return _internal_error();
}
inline void PromisePacket::_internal_set_error(bool value) {
  
  error_ = value;
}
inline void PromisePacket::set_error(bool value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:PromisePacket.error)
}

// string error_message = 2;
inline void PromisePacket::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PromisePacket::error_message() const {
  // @@protoc_insertion_point(field_get:PromisePacket.error_message)
  return _internal_error_message();
}
inline void PromisePacket::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:PromisePacket.error_message)
}
inline std::string* PromisePacket::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:PromisePacket.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& PromisePacket::_internal_error_message() const {
  return error_message_.Get();
}
inline void PromisePacket::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PromisePacket::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PromisePacket.error_message)
}
inline void PromisePacket::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PromisePacket.error_message)
}
inline void PromisePacket::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PromisePacket.error_message)
}
inline std::string* PromisePacket::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PromisePacket::release_error_message() {
  // @@protoc_insertion_point(field_release:PromisePacket.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PromisePacket::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PromisePacket.error_message)
}

// int32 max_proposal_num = 3;
inline void PromisePacket::clear_max_proposal_num() {
  max_proposal_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::_internal_max_proposal_num() const {
  return max_proposal_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::max_proposal_num() const {
  // @@protoc_insertion_point(field_get:PromisePacket.max_proposal_num)
  return _internal_max_proposal_num();
}
inline void PromisePacket::_internal_set_max_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_proposal_num_ = value;
}
inline void PromisePacket::set_max_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_proposal_num(value);
  // @@protoc_insertion_point(field_set:PromisePacket.max_proposal_num)
}

// string accepted_id = 4;
inline void PromisePacket::clear_accepted_id() {
  accepted_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PromisePacket::accepted_id() const {
  // @@protoc_insertion_point(field_get:PromisePacket.accepted_id)
  return _internal_accepted_id();
}
inline void PromisePacket::set_accepted_id(const std::string& value) {
  _internal_set_accepted_id(value);
  // @@protoc_insertion_point(field_set:PromisePacket.accepted_id)
}
inline std::string* PromisePacket::mutable_accepted_id() {
  // @@protoc_insertion_point(field_mutable:PromisePacket.accepted_id)
  return _internal_mutable_accepted_id();
}
inline const std::string& PromisePacket::_internal_accepted_id() const {
  return accepted_id_.Get();
}
inline void PromisePacket::_internal_set_accepted_id(const std::string& value) {
  
  accepted_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PromisePacket::set_accepted_id(std::string&& value) {
  
  accepted_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PromisePacket.accepted_id)
}
inline void PromisePacket::set_accepted_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accepted_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PromisePacket.accepted_id)
}
inline void PromisePacket::set_accepted_id(const char* value,
    size_t size) {
  
  accepted_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PromisePacket.accepted_id)
}
inline std::string* PromisePacket::_internal_mutable_accepted_id() {
  
  return accepted_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PromisePacket::release_accepted_id() {
  // @@protoc_insertion_point(field_release:PromisePacket.accepted_id)
  return accepted_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PromisePacket::set_allocated_accepted_id(std::string* accepted_id) {
  if (accepted_id != nullptr) {
    
  } else {
    
  }
  accepted_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accepted_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PromisePacket.accepted_id)
}

// int32 client_id = 5;
inline void PromisePacket::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::client_id() const {
  // @@protoc_insertion_point(field_get:PromisePacket.client_id)
  return _internal_client_id();
}
inline void PromisePacket::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void PromisePacket::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:PromisePacket.client_id)
}

// int32 client_command_id = 6;
inline void PromisePacket::clear_client_command_id() {
  client_command_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::_internal_client_command_id() const {
  return client_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PromisePacket::client_command_id() const {
  // @@protoc_insertion_point(field_get:PromisePacket.client_command_id)
  return _internal_client_command_id();
}
inline void PromisePacket::_internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_command_id_ = value;
}
inline void PromisePacket::set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_command_id(value);
  // @@protoc_insertion_point(field_set:PromisePacket.client_command_id)
}

// bool is_write = 7;
inline void PromisePacket::clear_is_write() {
  is_write_ = false;
}
inline bool PromisePacket::_internal_is_write() const {
  return is_write_;
}
inline bool PromisePacket::is_write() const {
  // @@protoc_insertion_point(field_get:PromisePacket.is_write)
  return _internal_is_write();
}
inline void PromisePacket::_internal_set_is_write(bool value) {
  
  is_write_ = value;
}
inline void PromisePacket::set_is_write(bool value) {
  _internal_set_is_write(value);
  // @@protoc_insertion_point(field_set:PromisePacket.is_write)
}

// string key = 8;
inline void PromisePacket::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PromisePacket::key() const {
  // @@protoc_insertion_point(field_get:PromisePacket.key)
  return _internal_key();
}
inline void PromisePacket::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:PromisePacket.key)
}
inline std::string* PromisePacket::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PromisePacket.key)
  return _internal_mutable_key();
}
inline const std::string& PromisePacket::_internal_key() const {
  return key_.Get();
}
inline void PromisePacket::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PromisePacket::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PromisePacket.key)
}
inline void PromisePacket::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PromisePacket.key)
}
inline void PromisePacket::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PromisePacket.key)
}
inline std::string* PromisePacket::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PromisePacket::release_key() {
  // @@protoc_insertion_point(field_release:PromisePacket.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PromisePacket::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PromisePacket.key)
}

// string value = 9;
inline void PromisePacket::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PromisePacket::value() const {
  // @@protoc_insertion_point(field_get:PromisePacket.value)
  return _internal_value();
}
inline void PromisePacket::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PromisePacket.value)
}
inline std::string* PromisePacket::mutable_value() {
  // @@protoc_insertion_point(field_mutable:PromisePacket.value)
  return _internal_mutable_value();
}
inline const std::string& PromisePacket::_internal_value() const {
  return value_.Get();
}
inline void PromisePacket::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PromisePacket::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PromisePacket.value)
}
inline void PromisePacket::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PromisePacket.value)
}
inline void PromisePacket::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PromisePacket.value)
}
inline std::string* PromisePacket::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PromisePacket::release_value() {
  // @@protoc_insertion_point(field_release:PromisePacket.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PromisePacket::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PromisePacket.value)
}

// -------------------------------------------------------------------

// ProposePacket

// int32 log_entry = 1;
inline void ProposePacket::clear_log_entry() {
  log_entry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::_internal_log_entry() const {
  return log_entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::log_entry() const {
  // @@protoc_insertion_point(field_get:ProposePacket.log_entry)
  return _internal_log_entry();
}
inline void ProposePacket::_internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_entry_ = value;
}
inline void ProposePacket::set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_entry(value);
  // @@protoc_insertion_point(field_set:ProposePacket.log_entry)
}

// int32 proposal_num = 2;
inline void ProposePacket::clear_proposal_num() {
  proposal_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::_internal_proposal_num() const {
  return proposal_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::proposal_num() const {
  // @@protoc_insertion_point(field_get:ProposePacket.proposal_num)
  return _internal_proposal_num();
}
inline void ProposePacket::_internal_set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proposal_num_ = value;
}
inline void ProposePacket::set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proposal_num(value);
  // @@protoc_insertion_point(field_set:ProposePacket.proposal_num)
}

// int32 server_id = 3;
inline void ProposePacket::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::server_id() const {
  // @@protoc_insertion_point(field_get:ProposePacket.server_id)
  return _internal_server_id();
}
inline void ProposePacket::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void ProposePacket::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:ProposePacket.server_id)
}

// int32 client_id = 4;
inline void ProposePacket::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::client_id() const {
  // @@protoc_insertion_point(field_get:ProposePacket.client_id)
  return _internal_client_id();
}
inline void ProposePacket::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void ProposePacket::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ProposePacket.client_id)
}

// int32 client_command_id = 5;
inline void ProposePacket::clear_client_command_id() {
  client_command_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::_internal_client_command_id() const {
  return client_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposePacket::client_command_id() const {
  // @@protoc_insertion_point(field_get:ProposePacket.client_command_id)
  return _internal_client_command_id();
}
inline void ProposePacket::_internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_command_id_ = value;
}
inline void ProposePacket::set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_command_id(value);
  // @@protoc_insertion_point(field_set:ProposePacket.client_command_id)
}

// bool is_write = 6;
inline void ProposePacket::clear_is_write() {
  is_write_ = false;
}
inline bool ProposePacket::_internal_is_write() const {
  return is_write_;
}
inline bool ProposePacket::is_write() const {
  // @@protoc_insertion_point(field_get:ProposePacket.is_write)
  return _internal_is_write();
}
inline void ProposePacket::_internal_set_is_write(bool value) {
  
  is_write_ = value;
}
inline void ProposePacket::set_is_write(bool value) {
  _internal_set_is_write(value);
  // @@protoc_insertion_point(field_set:ProposePacket.is_write)
}

// string key = 7;
inline void ProposePacket::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposePacket::key() const {
  // @@protoc_insertion_point(field_get:ProposePacket.key)
  return _internal_key();
}
inline void ProposePacket::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ProposePacket.key)
}
inline std::string* ProposePacket::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ProposePacket.key)
  return _internal_mutable_key();
}
inline const std::string& ProposePacket::_internal_key() const {
  return key_.Get();
}
inline void ProposePacket::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposePacket::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProposePacket.key)
}
inline void ProposePacket::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProposePacket.key)
}
inline void ProposePacket::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProposePacket.key)
}
inline std::string* ProposePacket::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposePacket::release_key() {
  // @@protoc_insertion_point(field_release:ProposePacket.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposePacket::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProposePacket.key)
}

// string value = 8;
inline void ProposePacket::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposePacket::value() const {
  // @@protoc_insertion_point(field_get:ProposePacket.value)
  return _internal_value();
}
inline void ProposePacket::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:ProposePacket.value)
}
inline std::string* ProposePacket::mutable_value() {
  // @@protoc_insertion_point(field_mutable:ProposePacket.value)
  return _internal_mutable_value();
}
inline const std::string& ProposePacket::_internal_value() const {
  return value_.Get();
}
inline void ProposePacket::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposePacket::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProposePacket.value)
}
inline void ProposePacket::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ProposePacket.value)
}
inline void ProposePacket::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProposePacket.value)
}
inline std::string* ProposePacket::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposePacket::release_value() {
  // @@protoc_insertion_point(field_release:ProposePacket.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposePacket::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProposePacket.value)
}

// -------------------------------------------------------------------

// AcceptPacket

// int32 log_entry = 1;
inline void AcceptPacket::clear_log_entry() {
  log_entry_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::_internal_log_entry() const {
  return log_entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::log_entry() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.log_entry)
  return _internal_log_entry();
}
inline void AcceptPacket::_internal_set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_entry_ = value;
}
inline void AcceptPacket::set_log_entry(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_entry(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.log_entry)
}

// int32 server_id = 3;
inline void AcceptPacket::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::server_id() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.server_id)
  return _internal_server_id();
}
inline void AcceptPacket::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void AcceptPacket::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.server_id)
}

// int32 proposal_num = 2;
inline void AcceptPacket::clear_proposal_num() {
  proposal_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::_internal_proposal_num() const {
  return proposal_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::proposal_num() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.proposal_num)
  return _internal_proposal_num();
}
inline void AcceptPacket::_internal_set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proposal_num_ = value;
}
inline void AcceptPacket::set_proposal_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proposal_num(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.proposal_num)
}

// bool is_error = 9;
inline void AcceptPacket::clear_is_error() {
  is_error_ = false;
}
inline bool AcceptPacket::_internal_is_error() const {
  return is_error_;
}
inline bool AcceptPacket::is_error() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.is_error)
  return _internal_is_error();
}
inline void AcceptPacket::_internal_set_is_error(bool value) {
  
  is_error_ = value;
}
inline void AcceptPacket::set_is_error(bool value) {
  _internal_set_is_error(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.is_error)
}

// string error_message = 10;
inline void AcceptPacket::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcceptPacket::error_message() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.error_message)
  return _internal_error_message();
}
inline void AcceptPacket::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.error_message)
}
inline std::string* AcceptPacket::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:AcceptPacket.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& AcceptPacket::_internal_error_message() const {
  return error_message_.Get();
}
inline void AcceptPacket::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcceptPacket::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcceptPacket.error_message)
}
inline void AcceptPacket::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcceptPacket.error_message)
}
inline void AcceptPacket::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcceptPacket.error_message)
}
inline std::string* AcceptPacket::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcceptPacket::release_error_message() {
  // @@protoc_insertion_point(field_release:AcceptPacket.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcceptPacket::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcceptPacket.error_message)
}

// int32 client_id = 4;
inline void AcceptPacket::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::client_id() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.client_id)
  return _internal_client_id();
}
inline void AcceptPacket::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void AcceptPacket::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.client_id)
}

// int32 client_command_id = 5;
inline void AcceptPacket::clear_client_command_id() {
  client_command_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::_internal_client_command_id() const {
  return client_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcceptPacket::client_command_id() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.client_command_id)
  return _internal_client_command_id();
}
inline void AcceptPacket::_internal_set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_command_id_ = value;
}
inline void AcceptPacket::set_client_command_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_command_id(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.client_command_id)
}

// bool is_write = 6;
inline void AcceptPacket::clear_is_write() {
  is_write_ = false;
}
inline bool AcceptPacket::_internal_is_write() const {
  return is_write_;
}
inline bool AcceptPacket::is_write() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.is_write)
  return _internal_is_write();
}
inline void AcceptPacket::_internal_set_is_write(bool value) {
  
  is_write_ = value;
}
inline void AcceptPacket::set_is_write(bool value) {
  _internal_set_is_write(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.is_write)
}

// string key = 7;
inline void AcceptPacket::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcceptPacket::key() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.key)
  return _internal_key();
}
inline void AcceptPacket::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.key)
}
inline std::string* AcceptPacket::mutable_key() {
  // @@protoc_insertion_point(field_mutable:AcceptPacket.key)
  return _internal_mutable_key();
}
inline const std::string& AcceptPacket::_internal_key() const {
  return key_.Get();
}
inline void AcceptPacket::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcceptPacket::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcceptPacket.key)
}
inline void AcceptPacket::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcceptPacket.key)
}
inline void AcceptPacket::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcceptPacket.key)
}
inline std::string* AcceptPacket::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcceptPacket::release_key() {
  // @@protoc_insertion_point(field_release:AcceptPacket.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcceptPacket::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcceptPacket.key)
}

// string value = 8;
inline void AcceptPacket::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcceptPacket::value() const {
  // @@protoc_insertion_point(field_get:AcceptPacket.value)
  return _internal_value();
}
inline void AcceptPacket::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:AcceptPacket.value)
}
inline std::string* AcceptPacket::mutable_value() {
  // @@protoc_insertion_point(field_mutable:AcceptPacket.value)
  return _internal_mutable_value();
}
inline const std::string& AcceptPacket::_internal_value() const {
  return value_.Get();
}
inline void AcceptPacket::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcceptPacket::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AcceptPacket.value)
}
inline void AcceptPacket::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AcceptPacket.value)
}
inline void AcceptPacket::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AcceptPacket.value)
}
inline std::string* AcceptPacket::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcceptPacket::release_value() {
  // @@protoc_insertion_point(field_release:AcceptPacket.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcceptPacket::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AcceptPacket.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paxos_2eproto
